import numpy as np
from NSphere import NSphere
np.set_printoptions(precision=10)


class PropossalLogLikeDet:
    def __init__(self, data, ndims, sigma=0.5):
        self.N = len(data)
        self.ndims = ndims
        self.sigma = sigma
        # data contains the likelihoods and points generated by a NSphere objects
        points = data[:, :ndims]
        datalikes = data[:, ndims]
        print(np.shape(points), np.shape(datalikes))
        sort_by_likes = np.argsort(data[:,ndims], axis=0)
        print(sort_by_likes)
        self.points = points[sort_by_likes]
        self.datalikes = datalikes[sort_by_likes]
        print(np.shape(self.points))
        cov_matrix = np.cov(self.points)
        print(np.shape(cov_matrix))
        # slogdet returns -np.inf
        # _, self.logdet = np.linalg.slogdet(cov_matrix)
        eigvals, _ = np.linalg.eigh(cov_matrix)
        self.logdet = np.sum(eigvals)
        print("log(|cov|): {}".format(self.logdet))

        sphere = NSphere(ndims)
        self.unit_logvol = sphere.logvol(1)
        print("unit log-vol {}".format(self.unit_logvol))
        print(np.sqrt(self.logdet))
        # ct -> constant; logct -> log(ct)
        self.logct = 0. - (self.logdet/2 + self.unit_logvol)
        print(self.logct)

    def propossal_fn(self, logLmax, logxMax, i, d):
        xMax = np.exp(logxMax)
        return logLmax - 0.5 * np.sign(xMax) * np.exp(self.logct) * \
               (i * np.abs(xMax) / self.N) ** (2 / d)

    def loglike_freeDim(self, theta):
        loglmax, logxMax, d = theta
        i = np.arange(1, self.N + 1)
        chisq = np.sum(((self.datalikes -
                         self.propossal_fn(loglmax, logxMax, i, d)) /
                         self.sigma) ** 2)

        return 0.5 * chisq

    def loglike_noDim(self, theta):
        loglmax, logxMax = theta
        i = np.arange(1, self.N + 1)
        chisq = np.sum(((self.datalikes -
                         self.propossal_fn(loglmax, logxMax, i, self.ndims)) /
                        self.sigma) ** 2)

        return 0.5 * chisq


