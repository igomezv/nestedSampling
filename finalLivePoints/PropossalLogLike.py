import numpy as np


class PropossalLogLike:
    def __init__(self, datalikes, ndims, sigma=0.5):
        self.N = len(datalikes)
        self.ndims = ndims
        # datalikes contains the likelihoods generated by a NSphere objects
        self.datalikes = np.sort(datalikes, axis=0)
        self.sigma = sigma

    def propossal_fn(self, logLmax, logxMax, i, alpha, d):
        xMax = np.exp(logxMax)
        return logLmax - alpha * np.sign(xMax) * (i * np.abs(xMax) / self.N) ** (2 / d)

    def loglike_freeDim(self, theta):
        loglmax, logxMax, alpha, d = theta
        i = np.arange(1, self.N + 1)
        chisq = np.sum(((self.datalikes -
                         self.propossal_fn(loglmax, logxMax, i, alpha, d)) /
                         self.sigma) ** 2)

        return 0.5 * chisq

    def loglike_noDim(self, theta):
        loglmax, logxMax, alpha = theta
        i = np.arange(1, self.N + 1)
        chisq = np.sum(((self.datalikes -
                         self.propossal_fn(loglmax, logxMax, i, alpha, self.ndims)) /
                        self.sigma) ** 2)

        return 0.5 * chisq


